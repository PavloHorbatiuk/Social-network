{"version":3,"sources":["Components/Navbar/Navbar.module.css","Components/Dialogs/Dialogs.module.css","Components/SideBarFriends/SIdebarFriends.module.css","App.module.css","Components/Header/Header.module.css","Components/Profile/My posts/Posts/Post.module.css","Components/Profile/My posts/MyPosts.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Content.module.css","Components/Header/Header.tsx","Components/Navbar/Navbar.tsx","Components/Profile/My posts/Posts/Posts.tsx","Redux/State.tsx","Components/Profile/My posts/Myposts.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/SideBarFriends/SideBarFriends.tsx","App.tsx","index.tsx"],"names":["module","exports","Header","className","s","header","src","Navbar","props","nav","item","to","activeClassName","active","Posts","message","LikesCount","store","_state","ProfilePage","MyPostsData","id","newPostText","messagePage","DialogsData","name","MessagesData","newMessageBody","SideBar","getState","this","dispatch","action","type","newPost","Date","getTime","push","rerenderEntireTree","newText","body","console","log","subscribe","observer","MyPosts","PostsElement","map","m","posts","TextField","label","value","onChange","e","currentTarget","Button","onClick","ProfileInfo","Profile","state","Message","Avatar","img","dialog","DialogsItems","path","Dialogs","DialogsElements","d","messagesElement","newMessaggeBody","dialogs","dialogItems","messages","updateNewMessageBodyCreator","variant","FriendsItem","SideBarFriends","bigFriends","sideBar","content","App","appWrapper","navbarwrappper","style","render","ReactDOM","bind","document","getElementById"],"mappings":"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","file":"static/js/main.7cff242d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1x_5z\",\"item\":\"Navbar_item__aF-j8\",\"active\":\"Navbar_active__2Wknj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__-eIhE\",\"dialogItems\":\"Dialogs_dialogItems__1E-VT\",\"messages\":\"Dialogs_messages__1DwvL\",\"message\":\"Dialogs_message__4C7ZL\",\"s\":\"Dialogs_s__24nYo\",\"img\":\"Dialogs_img__14RvZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideBar\":\"SIdebarFriends_sideBar__34H3G\",\"item\":\"SIdebarFriends_item__e04Zd\",\"active\":\"SIdebarFriends_active__3mvtD\",\"content\":\"SIdebarFriends_content__2ZlIc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1WaLk\",\"navbarwrappper\":\"App_navbarwrappper__3iLdn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1hm4S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__3jn7l\",\"item\":\"Post_item__wDNQ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__1AScq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"ProfileInfo_ProfileInfo__nmEEx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__14Bda\"};","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\n\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header className={s.header}>\r\n      <img src='https://themified.com/friend-finder/images/logo.png' />\r\n    </header>)\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\nimport {stateType} from \"../../Redux/State\";\r\n\r\n\r\ntype NavbarStateType = {\r\n    state: stateType\r\n}\r\n\r\n\r\nexport const Navbar = (props: NavbarStateType) => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/dialogs' activeClassName={s.active}>Messages</NavLink></div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.active}>News</NavLink></div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.active}>Music</NavLink></div>\r\n            <div className={s.item}>\r\n                <NavLink to='settings' activeClassName={s.active}>Settings</NavLink></div>\r\n        </nav>\r\n)\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype MyPostsType = {\r\n    message: string,\r\n    LikesCount: string\r\n};\r\n\r\n\r\nexport const Posts: React.FC<MyPostsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg'/>\r\n\r\n            {props.message}\r\n\r\n    <div>{props.LikesCount}</div>\r\n</div>\r\n)\r\n}\r\n\r\n","const ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST = \"UPDATE-NEW-POST-TEXT\";\r\nconst UPDATE_NEW_MEWSSAGE_BODY = \"UPDATE_NEW_MEWSSAGE_BODY \";\r\nconst SEND_MESSAGE_BODY = \"SEND_MESSAGE_BODY\";\r\n\r\nexport type stateType = {\r\n    messagePage: messagePageType,\r\n    ProfilePage: ProfilePageType,\r\n    SideBar: Array<SideBarType>\r\n    newMessageBody: string\r\n}\r\nexport type ProfilePageType = {\r\n    MyPostsData: Array<MyPostsData>,\r\n    newPostText: string,\r\n\r\n}\r\ntype MyPostsData = {\r\n    id: number,\r\n    message: string,\r\n    LikesCount: string\r\n}\r\nexport type messagePageType = {\r\n    MessagesData: Array<MessagesDataType>,\r\n    DialogsData: Array<DialogsDataType>,\r\n}\r\nexport type DialogsDataType = {\r\n    id: number,\r\n    name: string\r\n\r\n}\r\nexport type SideBarType = {\r\n    id: number,\r\n    name: string\r\n}\r\nexport type MessagesDataType = {\r\n    id: string | number,\r\n    message: string,\r\n\r\n}\r\nexport type DialogsItemsType = {\r\n    DialogsData: DialogsDataType\r\n}\r\nexport type storeType = {\r\n    _state: stateType,\r\n    getState: () => stateType\r\n    rerenderEntireTree: () => void\r\n    subscribe: (observer: () => void) => void\r\n    dispatch: (action: DispatchAcType) => void\r\n}\r\nexport type AddpostACType = {\r\n    type: 'ADD-POST'\r\n    newPostText: string\r\n}\r\nexport type ChangeNewPostACType = {\r\n    type: \"UPDATE-NEW-POST-TEXT\"\r\n    newText: string\r\n}\r\nexport type UpdateMessageBodyACType={\r\n    type:\"UPDATE_NEW_MEWSSAGE_BODY\"\r\n    body:string\r\n}\r\nexport type SendMessageBodyACType={\r\n    type:\"SEND_MESSAGE_BODY\",\r\n\r\n}\r\nexport type DispatchAcType = AddpostACType | ChangeNewPostACType|UpdateMessageBodyACType|SendMessageBodyACType\r\n\r\nconst store: storeType = {\r\n    _state: {\r\n        ProfilePage: {\r\n            MyPostsData: [\r\n                {id: 1, message: 'Hello my friend', LikesCount: '12'},\r\n                {id: 2, message: 'This is my first post', LikesCount: '10'},\r\n                {id: 2, message: 'DaDa', LikesCount: '10'},\r\n            ],\r\n            newPostText: \"Введите текст\",\r\n        },\r\n        messagePage: {\r\n            DialogsData: [\r\n                {id: 1, name: 'Pall'},\r\n                {id: 2, name: 'Artur'},\r\n                {id: 3, name: 'Valeri'},\r\n                {id: 4, name: 'Nikol'},\r\n                {id: 5, name: 'Bond'},\r\n                {id: 6, name: 'Petrovich'},\r\n            ],\r\n            MessagesData: [\r\n                {id: 1, message: 'hello'},\r\n                {id: 2, message: 'How are you'},\r\n                {id: 3, message: 'Yo'},\r\n            ],\r\n        },\r\n        newMessageBody: '',\r\n        SideBar: [\r\n            {id: 1, name: \"Andru\"},\r\n            {id: 2, name: \"Sasha\"},\r\n            {id: 3, name: \"Sveta\"},\r\n        ]\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    dispatch(action) {\r\n        if (action.type === 'ADD-POST') {\r\n            let newPost = {\r\n                id: new Date().getTime(),\r\n                message: this._state.ProfilePage.newPostText,\r\n                LikesCount: \"0\"\r\n            }\r\n            this._state.ProfilePage.MyPostsData.push(newPost);\r\n            this._state.ProfilePage.newPostText = (\"\");\r\n            this.rerenderEntireTree();\r\n        } else if (action.type === \"UPDATE-NEW-POST-TEXT\") {\r\n            this._state.ProfilePage.newPostText = action.newText;\r\n            this.rerenderEntireTree();\r\n        } else if(action.type===\"UPDATE_NEW_MEWSSAGE_BODY\"){\r\n            this._state.newMessageBody=action.body;\r\n            this.rerenderEntireTree()\r\n        }else if (action.type===\"SEND_MESSAGE_BODY\"){\r\n            let body= this._state.newMessageBody=('');\r\n            this._state.messagePage.MessagesData.push({id: 4, message: body});\r\n            this.rerenderEntireTree()\r\n        }\r\n    },\r\n    rerenderEntireTree() {\r\n        console.log(\"satate changed\")\r\n    },\r\n    subscribe(observer) {\r\n        this.rerenderEntireTree = observer;\r\n    },\r\n}\r\nexport const senMessageBodyCreator=():SendMessageBodyACType=>{\r\n    return {\r\n        type: \"SEND_MESSAGE_BODY\"\r\n    }\r\n}\r\nexport const updateNewMessageBodyCreator=(body:string):UpdateMessageBodyACType=>{\r\n    return {\r\n        type:\"UPDATE_NEW_MEWSSAGE_BODY\",\r\n        body:body\r\n    }\r\n}\r\nexport const addPostActionCreator = (newPostText: string): AddpostACType => {\r\n    return {\r\n    type: ADD_POST,\r\n    newPostText: newPostText\r\n    }\r\n}\r\n\r\nexport const onPostChangeActionCreator = (newText: string): ChangeNewPostACType => {\r\n\r\n    return {\r\n        type: UPDATE_NEW_POST,\r\n        newText: newText\r\n    }\r\n}\r\nexport default store;\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Posts} from './Posts/Posts';\r\nimport s from './MyPosts.module.css';\r\nimport {Button, TextField} from \"@mui/material\";\r\nimport {addPostActionCreator, DispatchAcType, onPostChangeActionCreator} from \"../../../Redux/State\";\r\n\r\ntype MyPostsDataType = {\r\n    id: number,\r\n    message: string,\r\n    LikesCount: string\r\n}\r\ntype MyPostsType = {\r\n    MyPostsData: Array<MyPostsDataType>\r\n    newPostText: string\r\n    dispatch: (action: DispatchAcType) => void\r\n    newText: string\r\n}\r\n\r\n\r\nexport const MyPosts = (props: MyPostsType) => {\r\n    let PostsElement = props.MyPostsData.map(m => <Posts message={m.message} LikesCount={m.LikesCount}  />)\r\n    let addPost = () => {\r\n        props.dispatch(addPostActionCreator(props.newPostText));\r\n    }\r\n    const onPostChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let action = onPostChangeActionCreator(e.currentTarget?.value)\r\n        props.dispatch(action)\r\n    }\r\n    return <div>\r\n        <div className={s.posts}>\r\n            {PostsElement}\r\n        </div>\r\n        <div>\r\n            {/*<h2>{props.newPostText}</h2>*/}\r\n            <div>\r\n                <TextField label=\"Chat\" value={props.newPostText} onChange={onPostChange}/>\r\n            </div>\r\n            <div>\r\n                <Button onClick={addPost}>Add post</Button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nexport const ProfileInfo=()=>{\r\n    return(<div>\r\n        <div className={s.ProfileInfo}>\r\n        <img src='http://www.wpkixx.com/html/winku-dark/images/resources/timeline-1.jpg'/>\r\n      </div>\r\n      <div>\r\n        ava+dicription\r\n      </div> \r\n      </div>\r\n    )\r\n}","import React from 'react';\r\nimport {MyPosts} from './My posts/Myposts';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {DispatchAcType, ProfilePageType, storeType} from \"../../Redux/State\";\r\n\r\ntype ProfileType = {\r\n    state: ProfilePageType\r\n    dispatch: (action: DispatchAcType) => void\r\n}\r\n\r\nexport const Profile = (props: ProfileType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <div>\r\n                <MyPosts\r\n                    MyPostsData={props.state.MyPostsData}\r\n                    newPostText={props.state.newPostText}\r\n                    dispatch={props.dispatch}\r\n                    newText=\"\"\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    const  Avatar = <img className={s.img} src={\"https://themified.com/friend-finder/images/users/user-7.jpg\"}/>\r\n    return (\r\n        <div className={s.dialog}>{Avatar}{props.message}</div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from './Message/Message';\r\nimport {\r\n    senMessageBodyCreator,\r\n    stateType,\r\n    storeType, updateNewMessageBodyCreator\r\n} from \"../../Redux/State\";\r\nimport {Button} from \"@mui/material\";\r\n\r\n\r\nconst DialogsItems = (props: any) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + '' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n\r\n    )\r\n}\r\ntype DialogsType = {\r\n    store: storeType\r\n    // getState: () => stateType\r\n\r\n\r\n}\r\n\r\nexport const Dialogs = (props: DialogsType) => {\r\n    let state = props.store.getState().messagePage.DialogsData;\r\n    let DialogsElements = props.store._state.messagePage.DialogsData.map(d => <DialogsItems name={d.name} id={d.id}/>);\r\n    let messagesElement = props.store._state.messagePage.MessagesData.map(m => <Message message={m.message}/>);\r\n    let newMessaggeBody = props.store.getState().newMessageBody;\r\n    const addChat = () => {\r\n        props.store.dispatch(senMessageBodyCreator())\r\n    }\r\n    const onChangeNewBody = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.currentTarget?.value\r\n        props.store.dispatch(updateNewMessageBodyCreator(body))\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                <span>{DialogsElements}</span>\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div>\r\n                    <div><textarea value={newMessaggeBody} onChange={onChangeNewBody}></textarea></div>\r\n                    <div><Button variant=\"contained\" onClick={addChat}>Sent</Button></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {stateType} from \"../../Redux/State\";\r\nimport s from \"./SIdebarFriends.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype SideBarFriendsType = {\r\n    state: stateType\r\n}\r\nconst FriendsItem = (props: any) => {\r\n    let path = '/profile/' + props.id;\r\n    return (\r\n        <div className={s.dialog + '' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const SideBarFriends = (props: SideBarFriendsType) => {\r\n    const bigFriends = props.state.SideBar.map(s => <FriendsItem name={s.name} id={s.id}/>)\r\n    return (\r\n        <nav className={s.sideBar}>\r\n\r\n            <div className={s.content}>\r\n                Friends online\r\n                <NavLink to=\"/friends\" activeClassName={s.active}>{bigFriends}</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport {Header} from './Components/Header/Header';\r\nimport {Navbar} from './Components/Navbar/Navbar';\r\nimport {Profile} from './Components/Profile/Profile';\r\nimport s from './App.module.css';\r\nimport style from './Content.module.css';\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport store, {DispatchAcType, storeType} from \"./Redux/State\";\r\nimport {Dialogs} from './Components/Dialogs/Dialogs';\r\nimport {SideBarFriends} from \"./Components/SideBarFriends/SideBarFriends\";\r\n\r\n\r\nexport type AppPropsType = {\r\n    store: storeType\r\n    dispatch: (action: DispatchAcType) => void\r\n}\r\n\r\nconst App: React.FC<AppPropsType> = (props) => {\r\n    const state = props.store.getState();\r\n    return (\r\n        <BrowserRouter>\r\n            <div className={s.appWrapper}>\r\n                <Header/>\r\n                <div className={s.navbarwrappper}>\r\n                    <Navbar state={props.store._state}/>\r\n                    <SideBarFriends state={props.store._state}/>\r\n                </div>\r\n                <div className={style.content}>\r\n                    <Route path='/dialogs' render={() => <Dialogs store={props.store}/>}/>\r\n                    <Route path='/profile' render={() => <Profile state={props.store._state.ProfilePage}\r\n                                                                  dispatch={props.dispatch}\r\n                    />}/>\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store, {stateType} from \"./Redux/State\";\r\nimport ReactDOM from 'react-dom';\r\n\r\nlet rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <App\r\n                store={store}\r\n                dispatch={store.dispatch.bind(store)}\r\n            />\r\n        </BrowserRouter>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nrerenderEntireTree();\r\nstore.subscribe(rerenderEntireTree);\r\n"],"sourceRoot":""}